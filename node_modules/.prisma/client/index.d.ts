
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model GroupOfActivity
 * 
 */
export type GroupOfActivity = $Result.DefaultSelection<Prisma.$GroupOfActivityPayload>
/**
 * Model typeOfActivity
 * 
 */
export type typeOfActivity = $Result.DefaultSelection<Prisma.$typeOfActivityPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs>;

  /**
   * `prisma.groupOfActivity`: Exposes CRUD operations for the **GroupOfActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupOfActivities
    * const groupOfActivities = await prisma.groupOfActivity.findMany()
    * ```
    */
  get groupOfActivity(): Prisma.GroupOfActivityDelegate<ExtArgs>;

  /**
   * `prisma.typeOfActivity`: Exposes CRUD operations for the **typeOfActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypeOfActivities
    * const typeOfActivities = await prisma.typeOfActivity.findMany()
    * ```
    */
  get typeOfActivity(): Prisma.typeOfActivityDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.6.0
   * Query Engine version: e95e739751f42d8ca026f6b910f5a2dc5adeaeee
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Activity: 'Activity',
    GroupOfActivity: 'GroupOfActivity',
    typeOfActivity: 'typeOfActivity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'activity' | 'groupOfActivity' | 'typeOfActivity'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      GroupOfActivity: {
        payload: Prisma.$GroupOfActivityPayload<ExtArgs>
        fields: Prisma.GroupOfActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupOfActivityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupOfActivityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>
          }
          findFirst: {
            args: Prisma.GroupOfActivityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupOfActivityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>
          }
          findMany: {
            args: Prisma.GroupOfActivityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>[]
          }
          create: {
            args: Prisma.GroupOfActivityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>
          }
          delete: {
            args: Prisma.GroupOfActivityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>
          }
          update: {
            args: Prisma.GroupOfActivityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>
          }
          deleteMany: {
            args: Prisma.GroupOfActivityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GroupOfActivityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GroupOfActivityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupOfActivityPayload>
          }
          aggregate: {
            args: Prisma.GroupOfActivityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGroupOfActivity>
          }
          groupBy: {
            args: Prisma.GroupOfActivityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GroupOfActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupOfActivityCountArgs<ExtArgs>,
            result: $Utils.Optional<GroupOfActivityCountAggregateOutputType> | number
          }
        }
      }
      typeOfActivity: {
        payload: Prisma.$typeOfActivityPayload<ExtArgs>
        fields: Prisma.typeOfActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.typeOfActivityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.typeOfActivityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>
          }
          findFirst: {
            args: Prisma.typeOfActivityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.typeOfActivityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>
          }
          findMany: {
            args: Prisma.typeOfActivityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>[]
          }
          create: {
            args: Prisma.typeOfActivityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>
          }
          delete: {
            args: Prisma.typeOfActivityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>
          }
          update: {
            args: Prisma.typeOfActivityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>
          }
          deleteMany: {
            args: Prisma.typeOfActivityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.typeOfActivityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.typeOfActivityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$typeOfActivityPayload>
          }
          aggregate: {
            args: Prisma.TypeOfActivityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTypeOfActivity>
          }
          groupBy: {
            args: Prisma.typeOfActivityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TypeOfActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.typeOfActivityCountArgs<ExtArgs>,
            result: $Utils.Optional<TypeOfActivityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GroupOfActivityCountOutputType
   */

  export type GroupOfActivityCountOutputType = {
    activityTypes: number
  }

  export type GroupOfActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityTypes?: boolean | GroupOfActivityCountOutputTypeCountActivityTypesArgs
  }

  // Custom InputTypes

  /**
   * GroupOfActivityCountOutputType without action
   */
  export type GroupOfActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivityCountOutputType
     */
    select?: GroupOfActivityCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GroupOfActivityCountOutputType without action
   */
  export type GroupOfActivityCountOutputTypeCountActivityTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: typeOfActivityWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    userType: string | null
    status: string | null
    matriculation: string | null
    class: string | null
    telephone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    passwordResetToken: string | null
    passwordResetAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    userType: string | null
    status: string | null
    matriculation: string | null
    class: string | null
    telephone: string | null
    createdAt: Date | null
    updatedAt: Date | null
    passwordResetToken: string | null
    passwordResetAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    userType: number
    status: number
    matriculation: number
    class: number
    telephone: number
    createdAt: number
    updatedAt: number
    passwordResetToken: number
    passwordResetAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    userType?: true
    status?: true
    matriculation?: true
    class?: true
    telephone?: true
    createdAt?: true
    updatedAt?: true
    passwordResetToken?: true
    passwordResetAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    userType?: true
    status?: true
    matriculation?: true
    class?: true
    telephone?: true
    createdAt?: true
    updatedAt?: true
    passwordResetToken?: true
    passwordResetAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    userType?: true
    status?: true
    matriculation?: true
    class?: true
    telephone?: true
    createdAt?: true
    updatedAt?: true
    passwordResetToken?: true
    passwordResetAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    userType: string
    status: string
    matriculation: string
    class: string | null
    telephone: string
    createdAt: Date
    updatedAt: Date
    passwordResetToken: string
    passwordResetAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    userType?: boolean
    status?: boolean
    matriculation?: boolean
    class?: boolean
    telephone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetToken?: boolean
    passwordResetAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    userType?: boolean
    status?: boolean
    matriculation?: boolean
    class?: boolean
    telephone?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    passwordResetToken?: boolean
    passwordResetAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      userType: string
      status: string
      matriculation: string
      class: string | null
      telephone: string
      createdAt: Date
      updatedAt: Date
      passwordResetToken: string
      passwordResetAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly userType: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'String'>
    readonly matriculation: FieldRef<"User", 'String'>
    readonly class: FieldRef<"User", 'String'>
    readonly telephone: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly passwordResetToken: FieldRef<"User", 'String'>
    readonly passwordResetAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    id: number | null
    idStudent: number | null
    workload: number | null
  }

  export type ActivitySumAggregateOutputType = {
    id: number | null
    idStudent: number | null
    workload: number | null
  }

  export type ActivityMinAggregateOutputType = {
    id: number | null
    idStudent: number | null
    name: string | null
    activityGroup: string | null
    activityType: string | null
    workload: number | null
    activityPeriod: string | null
    placeOfCourse: string | null
    certificate: string | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: number | null
    idStudent: number | null
    name: string | null
    activityGroup: string | null
    activityType: string | null
    workload: number | null
    activityPeriod: string | null
    placeOfCourse: string | null
    certificate: string | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    idStudent: number
    name: number
    activityGroup: number
    activityType: number
    workload: number
    activityPeriod: number
    placeOfCourse: number
    certificate: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    id?: true
    idStudent?: true
    workload?: true
  }

  export type ActivitySumAggregateInputType = {
    id?: true
    idStudent?: true
    workload?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    idStudent?: true
    name?: true
    activityGroup?: true
    activityType?: true
    workload?: true
    activityPeriod?: true
    placeOfCourse?: true
    certificate?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    idStudent?: true
    name?: true
    activityGroup?: true
    activityType?: true
    workload?: true
    activityPeriod?: true
    placeOfCourse?: true
    certificate?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    idStudent?: true
    name?: true
    activityGroup?: true
    activityType?: true
    workload?: true
    activityPeriod?: true
    placeOfCourse?: true
    certificate?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: number
    idStudent: number
    name: string
    activityGroup: string
    activityType: string
    workload: number
    activityPeriod: string
    placeOfCourse: string
    certificate: string
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    idStudent?: boolean
    name?: boolean
    activityGroup?: boolean
    activityType?: boolean
    workload?: boolean
    activityPeriod?: boolean
    placeOfCourse?: boolean
    certificate?: boolean
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    id?: boolean
    idStudent?: boolean
    name?: boolean
    activityGroup?: boolean
    activityType?: boolean
    workload?: boolean
    activityPeriod?: boolean
    placeOfCourse?: boolean
    certificate?: boolean
  }


  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      idStudent: number
      name: string
      activityGroup: string
      activityType: string
      workload: number
      activityPeriod: string
      placeOfCourse: string
      certificate: string
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }


  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Activity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ActivityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
    **/
    create<T extends ActivityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
    **/
    delete<T extends ActivityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Activity model
   */ 
  interface ActivityFieldRefs {
    readonly id: FieldRef<"Activity", 'Int'>
    readonly idStudent: FieldRef<"Activity", 'Int'>
    readonly name: FieldRef<"Activity", 'String'>
    readonly activityGroup: FieldRef<"Activity", 'String'>
    readonly activityType: FieldRef<"Activity", 'String'>
    readonly workload: FieldRef<"Activity", 'Int'>
    readonly activityPeriod: FieldRef<"Activity", 'String'>
    readonly placeOfCourse: FieldRef<"Activity", 'String'>
    readonly certificate: FieldRef<"Activity", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }


  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
  }


  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }


  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
  }


  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
  }



  /**
   * Model GroupOfActivity
   */

  export type AggregateGroupOfActivity = {
    _count: GroupOfActivityCountAggregateOutputType | null
    _avg: GroupOfActivityAvgAggregateOutputType | null
    _sum: GroupOfActivitySumAggregateOutputType | null
    _min: GroupOfActivityMinAggregateOutputType | null
    _max: GroupOfActivityMaxAggregateOutputType | null
  }

  export type GroupOfActivityAvgAggregateOutputType = {
    id: number | null
  }

  export type GroupOfActivitySumAggregateOutputType = {
    id: number | null
  }

  export type GroupOfActivityMinAggregateOutputType = {
    id: number | null
    name: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupOfActivityMaxAggregateOutputType = {
    id: number | null
    name: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GroupOfActivityCountAggregateOutputType = {
    id: number
    name: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GroupOfActivityAvgAggregateInputType = {
    id?: true
  }

  export type GroupOfActivitySumAggregateInputType = {
    id?: true
  }

  export type GroupOfActivityMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupOfActivityMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GroupOfActivityCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GroupOfActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupOfActivity to aggregate.
     */
    where?: GroupOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOfActivities to fetch.
     */
    orderBy?: GroupOfActivityOrderByWithRelationInput | GroupOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOfActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupOfActivities
    **/
    _count?: true | GroupOfActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupOfActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupOfActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupOfActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupOfActivityMaxAggregateInputType
  }

  export type GetGroupOfActivityAggregateType<T extends GroupOfActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupOfActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupOfActivity[P]>
      : GetScalarType<T[P], AggregateGroupOfActivity[P]>
  }




  export type GroupOfActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupOfActivityWhereInput
    orderBy?: GroupOfActivityOrderByWithAggregationInput | GroupOfActivityOrderByWithAggregationInput[]
    by: GroupOfActivityScalarFieldEnum[] | GroupOfActivityScalarFieldEnum
    having?: GroupOfActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupOfActivityCountAggregateInputType | true
    _avg?: GroupOfActivityAvgAggregateInputType
    _sum?: GroupOfActivitySumAggregateInputType
    _min?: GroupOfActivityMinAggregateInputType
    _max?: GroupOfActivityMaxAggregateInputType
  }

  export type GroupOfActivityGroupByOutputType = {
    id: number
    name: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: GroupOfActivityCountAggregateOutputType | null
    _avg: GroupOfActivityAvgAggregateOutputType | null
    _sum: GroupOfActivitySumAggregateOutputType | null
    _min: GroupOfActivityMinAggregateOutputType | null
    _max: GroupOfActivityMaxAggregateOutputType | null
  }

  type GetGroupOfActivityGroupByPayload<T extends GroupOfActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupOfActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupOfActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupOfActivityGroupByOutputType[P]>
            : GetScalarType<T[P], GroupOfActivityGroupByOutputType[P]>
        }
      >
    >


  export type GroupOfActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activityTypes?: boolean | GroupOfActivity$activityTypesArgs<ExtArgs>
    _count?: boolean | GroupOfActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["groupOfActivity"]>

  export type GroupOfActivitySelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GroupOfActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityTypes?: boolean | GroupOfActivity$activityTypesArgs<ExtArgs>
    _count?: boolean | GroupOfActivityCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $GroupOfActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GroupOfActivity"
    objects: {
      activityTypes: Prisma.$typeOfActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["groupOfActivity"]>
    composites: {}
  }


  type GroupOfActivityGetPayload<S extends boolean | null | undefined | GroupOfActivityDefaultArgs> = $Result.GetResult<Prisma.$GroupOfActivityPayload, S>

  type GroupOfActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupOfActivityFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: GroupOfActivityCountAggregateInputType | true
    }

  export interface GroupOfActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupOfActivity'], meta: { name: 'GroupOfActivity' } }
    /**
     * Find zero or one GroupOfActivity that matches the filter.
     * @param {GroupOfActivityFindUniqueArgs} args - Arguments to find a GroupOfActivity
     * @example
     * // Get one GroupOfActivity
     * const groupOfActivity = await prisma.groupOfActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupOfActivityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GroupOfActivityFindUniqueArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GroupOfActivity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GroupOfActivityFindUniqueOrThrowArgs} args - Arguments to find a GroupOfActivity
     * @example
     * // Get one GroupOfActivity
     * const groupOfActivity = await prisma.groupOfActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupOfActivityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupOfActivityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GroupOfActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityFindFirstArgs} args - Arguments to find a GroupOfActivity
     * @example
     * // Get one GroupOfActivity
     * const groupOfActivity = await prisma.groupOfActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupOfActivityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupOfActivityFindFirstArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GroupOfActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityFindFirstOrThrowArgs} args - Arguments to find a GroupOfActivity
     * @example
     * // Get one GroupOfActivity
     * const groupOfActivity = await prisma.groupOfActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupOfActivityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupOfActivityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GroupOfActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupOfActivities
     * const groupOfActivities = await prisma.groupOfActivity.findMany()
     * 
     * // Get first 10 GroupOfActivities
     * const groupOfActivities = await prisma.groupOfActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupOfActivityWithIdOnly = await prisma.groupOfActivity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupOfActivityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupOfActivityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GroupOfActivity.
     * @param {GroupOfActivityCreateArgs} args - Arguments to create a GroupOfActivity.
     * @example
     * // Create one GroupOfActivity
     * const GroupOfActivity = await prisma.groupOfActivity.create({
     *   data: {
     *     // ... data to create a GroupOfActivity
     *   }
     * })
     * 
    **/
    create<T extends GroupOfActivityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupOfActivityCreateArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a GroupOfActivity.
     * @param {GroupOfActivityDeleteArgs} args - Arguments to delete one GroupOfActivity.
     * @example
     * // Delete one GroupOfActivity
     * const GroupOfActivity = await prisma.groupOfActivity.delete({
     *   where: {
     *     // ... filter to delete one GroupOfActivity
     *   }
     * })
     * 
    **/
    delete<T extends GroupOfActivityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GroupOfActivityDeleteArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GroupOfActivity.
     * @param {GroupOfActivityUpdateArgs} args - Arguments to update one GroupOfActivity.
     * @example
     * // Update one GroupOfActivity
     * const groupOfActivity = await prisma.groupOfActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupOfActivityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupOfActivityUpdateArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GroupOfActivities.
     * @param {GroupOfActivityDeleteManyArgs} args - Arguments to filter GroupOfActivities to delete.
     * @example
     * // Delete a few GroupOfActivities
     * const { count } = await prisma.groupOfActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupOfActivityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupOfActivityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupOfActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupOfActivities
     * const groupOfActivity = await prisma.groupOfActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupOfActivityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GroupOfActivityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupOfActivity.
     * @param {GroupOfActivityUpsertArgs} args - Arguments to update or create a GroupOfActivity.
     * @example
     * // Update or create a GroupOfActivity
     * const groupOfActivity = await prisma.groupOfActivity.upsert({
     *   create: {
     *     // ... data to create a GroupOfActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupOfActivity we want to update
     *   }
     * })
    **/
    upsert<T extends GroupOfActivityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GroupOfActivityUpsertArgs<ExtArgs>>
    ): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of GroupOfActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityCountArgs} args - Arguments to filter GroupOfActivities to count.
     * @example
     * // Count the number of GroupOfActivities
     * const count = await prisma.groupOfActivity.count({
     *   where: {
     *     // ... the filter for the GroupOfActivities we want to count
     *   }
     * })
    **/
    count<T extends GroupOfActivityCountArgs>(
      args?: Subset<T, GroupOfActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupOfActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupOfActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupOfActivityAggregateArgs>(args: Subset<T, GroupOfActivityAggregateArgs>): Prisma.PrismaPromise<GetGroupOfActivityAggregateType<T>>

    /**
     * Group by GroupOfActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupOfActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupOfActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupOfActivityGroupByArgs['orderBy'] }
        : { orderBy?: GroupOfActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupOfActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupOfActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GroupOfActivity model
   */
  readonly fields: GroupOfActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupOfActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupOfActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activityTypes<T extends GroupOfActivity$activityTypesArgs<ExtArgs> = {}>(args?: Subset<T, GroupOfActivity$activityTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the GroupOfActivity model
   */ 
  interface GroupOfActivityFieldRefs {
    readonly id: FieldRef<"GroupOfActivity", 'Int'>
    readonly name: FieldRef<"GroupOfActivity", 'String'>
    readonly status: FieldRef<"GroupOfActivity", 'String'>
    readonly createdAt: FieldRef<"GroupOfActivity", 'DateTime'>
    readonly updatedAt: FieldRef<"GroupOfActivity", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * GroupOfActivity findUnique
   */
  export type GroupOfActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which GroupOfActivity to fetch.
     */
    where: GroupOfActivityWhereUniqueInput
  }


  /**
   * GroupOfActivity findUniqueOrThrow
   */
  export type GroupOfActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which GroupOfActivity to fetch.
     */
    where: GroupOfActivityWhereUniqueInput
  }


  /**
   * GroupOfActivity findFirst
   */
  export type GroupOfActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which GroupOfActivity to fetch.
     */
    where?: GroupOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOfActivities to fetch.
     */
    orderBy?: GroupOfActivityOrderByWithRelationInput | GroupOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupOfActivities.
     */
    cursor?: GroupOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOfActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupOfActivities.
     */
    distinct?: GroupOfActivityScalarFieldEnum | GroupOfActivityScalarFieldEnum[]
  }


  /**
   * GroupOfActivity findFirstOrThrow
   */
  export type GroupOfActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which GroupOfActivity to fetch.
     */
    where?: GroupOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOfActivities to fetch.
     */
    orderBy?: GroupOfActivityOrderByWithRelationInput | GroupOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupOfActivities.
     */
    cursor?: GroupOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOfActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupOfActivities.
     */
    distinct?: GroupOfActivityScalarFieldEnum | GroupOfActivityScalarFieldEnum[]
  }


  /**
   * GroupOfActivity findMany
   */
  export type GroupOfActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which GroupOfActivities to fetch.
     */
    where?: GroupOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupOfActivities to fetch.
     */
    orderBy?: GroupOfActivityOrderByWithRelationInput | GroupOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupOfActivities.
     */
    cursor?: GroupOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupOfActivities.
     */
    skip?: number
    distinct?: GroupOfActivityScalarFieldEnum | GroupOfActivityScalarFieldEnum[]
  }


  /**
   * GroupOfActivity create
   */
  export type GroupOfActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a GroupOfActivity.
     */
    data: XOR<GroupOfActivityCreateInput, GroupOfActivityUncheckedCreateInput>
  }


  /**
   * GroupOfActivity update
   */
  export type GroupOfActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a GroupOfActivity.
     */
    data: XOR<GroupOfActivityUpdateInput, GroupOfActivityUncheckedUpdateInput>
    /**
     * Choose, which GroupOfActivity to update.
     */
    where: GroupOfActivityWhereUniqueInput
  }


  /**
   * GroupOfActivity updateMany
   */
  export type GroupOfActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GroupOfActivities.
     */
    data: XOR<GroupOfActivityUpdateManyMutationInput, GroupOfActivityUncheckedUpdateManyInput>
    /**
     * Filter which GroupOfActivities to update
     */
    where?: GroupOfActivityWhereInput
  }


  /**
   * GroupOfActivity upsert
   */
  export type GroupOfActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the GroupOfActivity to update in case it exists.
     */
    where: GroupOfActivityWhereUniqueInput
    /**
     * In case the GroupOfActivity found by the `where` argument doesn't exist, create a new GroupOfActivity with this data.
     */
    create: XOR<GroupOfActivityCreateInput, GroupOfActivityUncheckedCreateInput>
    /**
     * In case the GroupOfActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupOfActivityUpdateInput, GroupOfActivityUncheckedUpdateInput>
  }


  /**
   * GroupOfActivity delete
   */
  export type GroupOfActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
    /**
     * Filter which GroupOfActivity to delete.
     */
    where: GroupOfActivityWhereUniqueInput
  }


  /**
   * GroupOfActivity deleteMany
   */
  export type GroupOfActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GroupOfActivities to delete
     */
    where?: GroupOfActivityWhereInput
  }


  /**
   * GroupOfActivity.activityTypes
   */
  export type GroupOfActivity$activityTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    where?: typeOfActivityWhereInput
    orderBy?: typeOfActivityOrderByWithRelationInput | typeOfActivityOrderByWithRelationInput[]
    cursor?: typeOfActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TypeOfActivityScalarFieldEnum | TypeOfActivityScalarFieldEnum[]
  }


  /**
   * GroupOfActivity without action
   */
  export type GroupOfActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupOfActivity
     */
    select?: GroupOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GroupOfActivityInclude<ExtArgs> | null
  }



  /**
   * Model typeOfActivity
   */

  export type AggregateTypeOfActivity = {
    _count: TypeOfActivityCountAggregateOutputType | null
    _avg: TypeOfActivityAvgAggregateOutputType | null
    _sum: TypeOfActivitySumAggregateOutputType | null
    _min: TypeOfActivityMinAggregateOutputType | null
    _max: TypeOfActivityMaxAggregateOutputType | null
  }

  export type TypeOfActivityAvgAggregateOutputType = {
    id: number | null
    courseWorkload: number | null
    semesterWorkload: number | null
  }

  export type TypeOfActivitySumAggregateOutputType = {
    id: number | null
    courseWorkload: number | null
    semesterWorkload: number | null
  }

  export type TypeOfActivityMinAggregateOutputType = {
    id: number | null
    description: string | null
    activityGroup: string | null
    courseWorkload: number | null
    semesterWorkload: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TypeOfActivityMaxAggregateOutputType = {
    id: number | null
    description: string | null
    activityGroup: string | null
    courseWorkload: number | null
    semesterWorkload: number | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TypeOfActivityCountAggregateOutputType = {
    id: number
    description: number
    activityGroup: number
    courseWorkload: number
    semesterWorkload: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TypeOfActivityAvgAggregateInputType = {
    id?: true
    courseWorkload?: true
    semesterWorkload?: true
  }

  export type TypeOfActivitySumAggregateInputType = {
    id?: true
    courseWorkload?: true
    semesterWorkload?: true
  }

  export type TypeOfActivityMinAggregateInputType = {
    id?: true
    description?: true
    activityGroup?: true
    courseWorkload?: true
    semesterWorkload?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TypeOfActivityMaxAggregateInputType = {
    id?: true
    description?: true
    activityGroup?: true
    courseWorkload?: true
    semesterWorkload?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TypeOfActivityCountAggregateInputType = {
    id?: true
    description?: true
    activityGroup?: true
    courseWorkload?: true
    semesterWorkload?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TypeOfActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which typeOfActivity to aggregate.
     */
    where?: typeOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typeOfActivities to fetch.
     */
    orderBy?: typeOfActivityOrderByWithRelationInput | typeOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: typeOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typeOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typeOfActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned typeOfActivities
    **/
    _count?: true | TypeOfActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeOfActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeOfActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeOfActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeOfActivityMaxAggregateInputType
  }

  export type GetTypeOfActivityAggregateType<T extends TypeOfActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateTypeOfActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypeOfActivity[P]>
      : GetScalarType<T[P], AggregateTypeOfActivity[P]>
  }




  export type typeOfActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: typeOfActivityWhereInput
    orderBy?: typeOfActivityOrderByWithAggregationInput | typeOfActivityOrderByWithAggregationInput[]
    by: TypeOfActivityScalarFieldEnum[] | TypeOfActivityScalarFieldEnum
    having?: typeOfActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeOfActivityCountAggregateInputType | true
    _avg?: TypeOfActivityAvgAggregateInputType
    _sum?: TypeOfActivitySumAggregateInputType
    _min?: TypeOfActivityMinAggregateInputType
    _max?: TypeOfActivityMaxAggregateInputType
  }

  export type TypeOfActivityGroupByOutputType = {
    id: number
    description: string
    activityGroup: string
    courseWorkload: number
    semesterWorkload: number
    status: string
    createdAt: Date
    updatedAt: Date
    _count: TypeOfActivityCountAggregateOutputType | null
    _avg: TypeOfActivityAvgAggregateOutputType | null
    _sum: TypeOfActivitySumAggregateOutputType | null
    _min: TypeOfActivityMinAggregateOutputType | null
    _max: TypeOfActivityMaxAggregateOutputType | null
  }

  type GetTypeOfActivityGroupByPayload<T extends typeOfActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypeOfActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeOfActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeOfActivityGroupByOutputType[P]>
            : GetScalarType<T[P], TypeOfActivityGroupByOutputType[P]>
        }
      >
    >


  export type typeOfActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    activityGroup?: boolean
    courseWorkload?: boolean
    semesterWorkload?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    activityGroupReference?: boolean | GroupOfActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["typeOfActivity"]>

  export type typeOfActivitySelectScalar = {
    id?: boolean
    description?: boolean
    activityGroup?: boolean
    courseWorkload?: boolean
    semesterWorkload?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type typeOfActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityGroupReference?: boolean | GroupOfActivityDefaultArgs<ExtArgs>
  }


  export type $typeOfActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "typeOfActivity"
    objects: {
      activityGroupReference: Prisma.$GroupOfActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      description: string
      activityGroup: string
      courseWorkload: number
      semesterWorkload: number
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["typeOfActivity"]>
    composites: {}
  }


  type typeOfActivityGetPayload<S extends boolean | null | undefined | typeOfActivityDefaultArgs> = $Result.GetResult<Prisma.$typeOfActivityPayload, S>

  type typeOfActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<typeOfActivityFindManyArgs, 'select' | 'include' | 'distinct' > & {
      select?: TypeOfActivityCountAggregateInputType | true
    }

  export interface typeOfActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['typeOfActivity'], meta: { name: 'typeOfActivity' } }
    /**
     * Find zero or one TypeOfActivity that matches the filter.
     * @param {typeOfActivityFindUniqueArgs} args - Arguments to find a TypeOfActivity
     * @example
     * // Get one TypeOfActivity
     * const typeOfActivity = await prisma.typeOfActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends typeOfActivityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, typeOfActivityFindUniqueArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one TypeOfActivity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {typeOfActivityFindUniqueOrThrowArgs} args - Arguments to find a TypeOfActivity
     * @example
     * // Get one TypeOfActivity
     * const typeOfActivity = await prisma.typeOfActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends typeOfActivityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, typeOfActivityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first TypeOfActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typeOfActivityFindFirstArgs} args - Arguments to find a TypeOfActivity
     * @example
     * // Get one TypeOfActivity
     * const typeOfActivity = await prisma.typeOfActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends typeOfActivityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, typeOfActivityFindFirstArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first TypeOfActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typeOfActivityFindFirstOrThrowArgs} args - Arguments to find a TypeOfActivity
     * @example
     * // Get one TypeOfActivity
     * const typeOfActivity = await prisma.typeOfActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends typeOfActivityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, typeOfActivityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more TypeOfActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typeOfActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypeOfActivities
     * const typeOfActivities = await prisma.typeOfActivity.findMany()
     * 
     * // Get first 10 TypeOfActivities
     * const typeOfActivities = await prisma.typeOfActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeOfActivityWithIdOnly = await prisma.typeOfActivity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends typeOfActivityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, typeOfActivityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a TypeOfActivity.
     * @param {typeOfActivityCreateArgs} args - Arguments to create a TypeOfActivity.
     * @example
     * // Create one TypeOfActivity
     * const TypeOfActivity = await prisma.typeOfActivity.create({
     *   data: {
     *     // ... data to create a TypeOfActivity
     *   }
     * })
     * 
    **/
    create<T extends typeOfActivityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, typeOfActivityCreateArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a TypeOfActivity.
     * @param {typeOfActivityDeleteArgs} args - Arguments to delete one TypeOfActivity.
     * @example
     * // Delete one TypeOfActivity
     * const TypeOfActivity = await prisma.typeOfActivity.delete({
     *   where: {
     *     // ... filter to delete one TypeOfActivity
     *   }
     * })
     * 
    **/
    delete<T extends typeOfActivityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, typeOfActivityDeleteArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one TypeOfActivity.
     * @param {typeOfActivityUpdateArgs} args - Arguments to update one TypeOfActivity.
     * @example
     * // Update one TypeOfActivity
     * const typeOfActivity = await prisma.typeOfActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends typeOfActivityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, typeOfActivityUpdateArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more TypeOfActivities.
     * @param {typeOfActivityDeleteManyArgs} args - Arguments to filter TypeOfActivities to delete.
     * @example
     * // Delete a few TypeOfActivities
     * const { count } = await prisma.typeOfActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends typeOfActivityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, typeOfActivityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypeOfActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typeOfActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypeOfActivities
     * const typeOfActivity = await prisma.typeOfActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends typeOfActivityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, typeOfActivityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TypeOfActivity.
     * @param {typeOfActivityUpsertArgs} args - Arguments to update or create a TypeOfActivity.
     * @example
     * // Update or create a TypeOfActivity
     * const typeOfActivity = await prisma.typeOfActivity.upsert({
     *   create: {
     *     // ... data to create a TypeOfActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypeOfActivity we want to update
     *   }
     * })
    **/
    upsert<T extends typeOfActivityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, typeOfActivityUpsertArgs<ExtArgs>>
    ): Prisma__typeOfActivityClient<$Result.GetResult<Prisma.$typeOfActivityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of TypeOfActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typeOfActivityCountArgs} args - Arguments to filter TypeOfActivities to count.
     * @example
     * // Count the number of TypeOfActivities
     * const count = await prisma.typeOfActivity.count({
     *   where: {
     *     // ... the filter for the TypeOfActivities we want to count
     *   }
     * })
    **/
    count<T extends typeOfActivityCountArgs>(
      args?: Subset<T, typeOfActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeOfActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypeOfActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeOfActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeOfActivityAggregateArgs>(args: Subset<T, TypeOfActivityAggregateArgs>): Prisma.PrismaPromise<GetTypeOfActivityAggregateType<T>>

    /**
     * Group by TypeOfActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {typeOfActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends typeOfActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: typeOfActivityGroupByArgs['orderBy'] }
        : { orderBy?: typeOfActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, typeOfActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeOfActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the typeOfActivity model
   */
  readonly fields: typeOfActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for typeOfActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__typeOfActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activityGroupReference<T extends GroupOfActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupOfActivityDefaultArgs<ExtArgs>>): Prisma__GroupOfActivityClient<$Result.GetResult<Prisma.$GroupOfActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the typeOfActivity model
   */ 
  interface typeOfActivityFieldRefs {
    readonly id: FieldRef<"typeOfActivity", 'Int'>
    readonly description: FieldRef<"typeOfActivity", 'String'>
    readonly activityGroup: FieldRef<"typeOfActivity", 'String'>
    readonly courseWorkload: FieldRef<"typeOfActivity", 'Int'>
    readonly semesterWorkload: FieldRef<"typeOfActivity", 'Int'>
    readonly status: FieldRef<"typeOfActivity", 'String'>
    readonly createdAt: FieldRef<"typeOfActivity", 'DateTime'>
    readonly updatedAt: FieldRef<"typeOfActivity", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * typeOfActivity findUnique
   */
  export type typeOfActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which typeOfActivity to fetch.
     */
    where: typeOfActivityWhereUniqueInput
  }


  /**
   * typeOfActivity findUniqueOrThrow
   */
  export type typeOfActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which typeOfActivity to fetch.
     */
    where: typeOfActivityWhereUniqueInput
  }


  /**
   * typeOfActivity findFirst
   */
  export type typeOfActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which typeOfActivity to fetch.
     */
    where?: typeOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typeOfActivities to fetch.
     */
    orderBy?: typeOfActivityOrderByWithRelationInput | typeOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for typeOfActivities.
     */
    cursor?: typeOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typeOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typeOfActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of typeOfActivities.
     */
    distinct?: TypeOfActivityScalarFieldEnum | TypeOfActivityScalarFieldEnum[]
  }


  /**
   * typeOfActivity findFirstOrThrow
   */
  export type typeOfActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which typeOfActivity to fetch.
     */
    where?: typeOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typeOfActivities to fetch.
     */
    orderBy?: typeOfActivityOrderByWithRelationInput | typeOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for typeOfActivities.
     */
    cursor?: typeOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typeOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typeOfActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of typeOfActivities.
     */
    distinct?: TypeOfActivityScalarFieldEnum | TypeOfActivityScalarFieldEnum[]
  }


  /**
   * typeOfActivity findMany
   */
  export type typeOfActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * Filter, which typeOfActivities to fetch.
     */
    where?: typeOfActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of typeOfActivities to fetch.
     */
    orderBy?: typeOfActivityOrderByWithRelationInput | typeOfActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing typeOfActivities.
     */
    cursor?: typeOfActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` typeOfActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` typeOfActivities.
     */
    skip?: number
    distinct?: TypeOfActivityScalarFieldEnum | TypeOfActivityScalarFieldEnum[]
  }


  /**
   * typeOfActivity create
   */
  export type typeOfActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a typeOfActivity.
     */
    data: XOR<typeOfActivityCreateInput, typeOfActivityUncheckedCreateInput>
  }


  /**
   * typeOfActivity update
   */
  export type typeOfActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a typeOfActivity.
     */
    data: XOR<typeOfActivityUpdateInput, typeOfActivityUncheckedUpdateInput>
    /**
     * Choose, which typeOfActivity to update.
     */
    where: typeOfActivityWhereUniqueInput
  }


  /**
   * typeOfActivity updateMany
   */
  export type typeOfActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update typeOfActivities.
     */
    data: XOR<typeOfActivityUpdateManyMutationInput, typeOfActivityUncheckedUpdateManyInput>
    /**
     * Filter which typeOfActivities to update
     */
    where?: typeOfActivityWhereInput
  }


  /**
   * typeOfActivity upsert
   */
  export type typeOfActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the typeOfActivity to update in case it exists.
     */
    where: typeOfActivityWhereUniqueInput
    /**
     * In case the typeOfActivity found by the `where` argument doesn't exist, create a new typeOfActivity with this data.
     */
    create: XOR<typeOfActivityCreateInput, typeOfActivityUncheckedCreateInput>
    /**
     * In case the typeOfActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<typeOfActivityUpdateInput, typeOfActivityUncheckedUpdateInput>
  }


  /**
   * typeOfActivity delete
   */
  export type typeOfActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
    /**
     * Filter which typeOfActivity to delete.
     */
    where: typeOfActivityWhereUniqueInput
  }


  /**
   * typeOfActivity deleteMany
   */
  export type typeOfActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which typeOfActivities to delete
     */
    where?: typeOfActivityWhereInput
  }


  /**
   * typeOfActivity without action
   */
  export type typeOfActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the typeOfActivity
     */
    select?: typeOfActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: typeOfActivityInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    userType: 'userType',
    status: 'status',
    matriculation: 'matriculation',
    class: 'class',
    telephone: 'telephone',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    passwordResetToken: 'passwordResetToken',
    passwordResetAt: 'passwordResetAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    idStudent: 'idStudent',
    name: 'name',
    activityGroup: 'activityGroup',
    activityType: 'activityType',
    workload: 'workload',
    activityPeriod: 'activityPeriod',
    placeOfCourse: 'placeOfCourse',
    certificate: 'certificate'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const GroupOfActivityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GroupOfActivityScalarFieldEnum = (typeof GroupOfActivityScalarFieldEnum)[keyof typeof GroupOfActivityScalarFieldEnum]


  export const TypeOfActivityScalarFieldEnum: {
    id: 'id',
    description: 'description',
    activityGroup: 'activityGroup',
    courseWorkload: 'courseWorkload',
    semesterWorkload: 'semesterWorkload',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TypeOfActivityScalarFieldEnum = (typeof TypeOfActivityScalarFieldEnum)[keyof typeof TypeOfActivityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    userType?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    matriculation?: StringFilter<"User"> | string
    class?: StringNullableFilter<"User"> | string | null
    telephone?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    passwordResetToken?: StringFilter<"User"> | string
    passwordResetAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userType?: SortOrder
    status?: SortOrder
    matriculation?: SortOrder
    class?: SortOrderInput | SortOrder
    telephone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    userType?: StringFilter<"User"> | string
    status?: StringFilter<"User"> | string
    matriculation?: StringFilter<"User"> | string
    class?: StringNullableFilter<"User"> | string | null
    telephone?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    passwordResetToken?: StringFilter<"User"> | string
    passwordResetAt?: DateTimeFilter<"User"> | Date | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userType?: SortOrder
    status?: SortOrder
    matriculation?: SortOrder
    class?: SortOrderInput | SortOrder
    telephone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    userType?: StringWithAggregatesFilter<"User"> | string
    status?: StringWithAggregatesFilter<"User"> | string
    matriculation?: StringWithAggregatesFilter<"User"> | string
    class?: StringNullableWithAggregatesFilter<"User"> | string | null
    telephone?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    passwordResetToken?: StringWithAggregatesFilter<"User"> | string
    passwordResetAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    id?: IntFilter<"Activity"> | number
    idStudent?: IntFilter<"Activity"> | number
    name?: StringFilter<"Activity"> | string
    activityGroup?: StringFilter<"Activity"> | string
    activityType?: StringFilter<"Activity"> | string
    workload?: IntFilter<"Activity"> | number
    activityPeriod?: StringFilter<"Activity"> | string
    placeOfCourse?: StringFilter<"Activity"> | string
    certificate?: StringFilter<"Activity"> | string
  }

  export type ActivityOrderByWithRelationInput = {
    id?: SortOrder
    idStudent?: SortOrder
    name?: SortOrder
    activityGroup?: SortOrder
    activityType?: SortOrder
    workload?: SortOrder
    activityPeriod?: SortOrder
    placeOfCourse?: SortOrder
    certificate?: SortOrder
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    idStudent?: IntFilter<"Activity"> | number
    name?: StringFilter<"Activity"> | string
    activityGroup?: StringFilter<"Activity"> | string
    activityType?: StringFilter<"Activity"> | string
    workload?: IntFilter<"Activity"> | number
    activityPeriod?: StringFilter<"Activity"> | string
    placeOfCourse?: StringFilter<"Activity"> | string
    certificate?: StringFilter<"Activity"> | string
  }, "id">

  export type ActivityOrderByWithAggregationInput = {
    id?: SortOrder
    idStudent?: SortOrder
    name?: SortOrder
    activityGroup?: SortOrder
    activityType?: SortOrder
    workload?: SortOrder
    activityPeriod?: SortOrder
    placeOfCourse?: SortOrder
    certificate?: SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Activity"> | number
    idStudent?: IntWithAggregatesFilter<"Activity"> | number
    name?: StringWithAggregatesFilter<"Activity"> | string
    activityGroup?: StringWithAggregatesFilter<"Activity"> | string
    activityType?: StringWithAggregatesFilter<"Activity"> | string
    workload?: IntWithAggregatesFilter<"Activity"> | number
    activityPeriod?: StringWithAggregatesFilter<"Activity"> | string
    placeOfCourse?: StringWithAggregatesFilter<"Activity"> | string
    certificate?: StringWithAggregatesFilter<"Activity"> | string
  }

  export type GroupOfActivityWhereInput = {
    AND?: GroupOfActivityWhereInput | GroupOfActivityWhereInput[]
    OR?: GroupOfActivityWhereInput[]
    NOT?: GroupOfActivityWhereInput | GroupOfActivityWhereInput[]
    id?: IntFilter<"GroupOfActivity"> | number
    name?: StringFilter<"GroupOfActivity"> | string
    status?: StringFilter<"GroupOfActivity"> | string
    createdAt?: DateTimeFilter<"GroupOfActivity"> | Date | string
    updatedAt?: DateTimeFilter<"GroupOfActivity"> | Date | string
    activityTypes?: TypeOfActivityListRelationFilter
  }

  export type GroupOfActivityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activityTypes?: typeOfActivityOrderByRelationAggregateInput
  }

  export type GroupOfActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: GroupOfActivityWhereInput | GroupOfActivityWhereInput[]
    OR?: GroupOfActivityWhereInput[]
    NOT?: GroupOfActivityWhereInput | GroupOfActivityWhereInput[]
    status?: StringFilter<"GroupOfActivity"> | string
    createdAt?: DateTimeFilter<"GroupOfActivity"> | Date | string
    updatedAt?: DateTimeFilter<"GroupOfActivity"> | Date | string
    activityTypes?: TypeOfActivityListRelationFilter
  }, "id" | "name">

  export type GroupOfActivityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GroupOfActivityCountOrderByAggregateInput
    _avg?: GroupOfActivityAvgOrderByAggregateInput
    _max?: GroupOfActivityMaxOrderByAggregateInput
    _min?: GroupOfActivityMinOrderByAggregateInput
    _sum?: GroupOfActivitySumOrderByAggregateInput
  }

  export type GroupOfActivityScalarWhereWithAggregatesInput = {
    AND?: GroupOfActivityScalarWhereWithAggregatesInput | GroupOfActivityScalarWhereWithAggregatesInput[]
    OR?: GroupOfActivityScalarWhereWithAggregatesInput[]
    NOT?: GroupOfActivityScalarWhereWithAggregatesInput | GroupOfActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"GroupOfActivity"> | number
    name?: StringWithAggregatesFilter<"GroupOfActivity"> | string
    status?: StringWithAggregatesFilter<"GroupOfActivity"> | string
    createdAt?: DateTimeWithAggregatesFilter<"GroupOfActivity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GroupOfActivity"> | Date | string
  }

  export type typeOfActivityWhereInput = {
    AND?: typeOfActivityWhereInput | typeOfActivityWhereInput[]
    OR?: typeOfActivityWhereInput[]
    NOT?: typeOfActivityWhereInput | typeOfActivityWhereInput[]
    id?: IntFilter<"typeOfActivity"> | number
    description?: StringFilter<"typeOfActivity"> | string
    activityGroup?: StringFilter<"typeOfActivity"> | string
    courseWorkload?: IntFilter<"typeOfActivity"> | number
    semesterWorkload?: IntFilter<"typeOfActivity"> | number
    status?: StringFilter<"typeOfActivity"> | string
    createdAt?: DateTimeFilter<"typeOfActivity"> | Date | string
    updatedAt?: DateTimeFilter<"typeOfActivity"> | Date | string
    activityGroupReference?: XOR<GroupOfActivityRelationFilter, GroupOfActivityWhereInput>
  }

  export type typeOfActivityOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    activityGroup?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    activityGroupReference?: GroupOfActivityOrderByWithRelationInput
  }

  export type typeOfActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    description?: string
    AND?: typeOfActivityWhereInput | typeOfActivityWhereInput[]
    OR?: typeOfActivityWhereInput[]
    NOT?: typeOfActivityWhereInput | typeOfActivityWhereInput[]
    activityGroup?: StringFilter<"typeOfActivity"> | string
    courseWorkload?: IntFilter<"typeOfActivity"> | number
    semesterWorkload?: IntFilter<"typeOfActivity"> | number
    status?: StringFilter<"typeOfActivity"> | string
    createdAt?: DateTimeFilter<"typeOfActivity"> | Date | string
    updatedAt?: DateTimeFilter<"typeOfActivity"> | Date | string
    activityGroupReference?: XOR<GroupOfActivityRelationFilter, GroupOfActivityWhereInput>
  }, "id" | "description">

  export type typeOfActivityOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    activityGroup?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: typeOfActivityCountOrderByAggregateInput
    _avg?: typeOfActivityAvgOrderByAggregateInput
    _max?: typeOfActivityMaxOrderByAggregateInput
    _min?: typeOfActivityMinOrderByAggregateInput
    _sum?: typeOfActivitySumOrderByAggregateInput
  }

  export type typeOfActivityScalarWhereWithAggregatesInput = {
    AND?: typeOfActivityScalarWhereWithAggregatesInput | typeOfActivityScalarWhereWithAggregatesInput[]
    OR?: typeOfActivityScalarWhereWithAggregatesInput[]
    NOT?: typeOfActivityScalarWhereWithAggregatesInput | typeOfActivityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"typeOfActivity"> | number
    description?: StringWithAggregatesFilter<"typeOfActivity"> | string
    activityGroup?: StringWithAggregatesFilter<"typeOfActivity"> | string
    courseWorkload?: IntWithAggregatesFilter<"typeOfActivity"> | number
    semesterWorkload?: IntWithAggregatesFilter<"typeOfActivity"> | number
    status?: StringWithAggregatesFilter<"typeOfActivity"> | string
    createdAt?: DateTimeWithAggregatesFilter<"typeOfActivity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"typeOfActivity"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    userType: string
    status: string
    matriculation: string
    class?: string | null
    telephone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetToken?: string
    passwordResetAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    userType: string
    status: string
    matriculation: string
    class?: string | null
    telephone: string
    createdAt?: Date | string
    updatedAt?: Date | string
    passwordResetToken?: string
    passwordResetAt?: Date | string
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    matriculation?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetToken?: StringFieldUpdateOperationsInput | string
    passwordResetAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    matriculation?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetToken?: StringFieldUpdateOperationsInput | string
    passwordResetAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    matriculation?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetToken?: StringFieldUpdateOperationsInput | string
    passwordResetAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    userType?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    matriculation?: StringFieldUpdateOperationsInput | string
    class?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    passwordResetToken?: StringFieldUpdateOperationsInput | string
    passwordResetAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityCreateInput = {
    idStudent: number
    name: string
    activityGroup: string
    activityType: string
    workload: number
    activityPeriod: string
    placeOfCourse: string
    certificate: string
  }

  export type ActivityUncheckedCreateInput = {
    id?: number
    idStudent: number
    name: string
    activityGroup: string
    activityType: string
    workload: number
    activityPeriod: string
    placeOfCourse: string
    certificate: string
  }

  export type ActivityUpdateInput = {
    idStudent?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activityGroup?: StringFieldUpdateOperationsInput | string
    activityType?: StringFieldUpdateOperationsInput | string
    workload?: IntFieldUpdateOperationsInput | number
    activityPeriod?: StringFieldUpdateOperationsInput | string
    placeOfCourse?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    idStudent?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activityGroup?: StringFieldUpdateOperationsInput | string
    activityType?: StringFieldUpdateOperationsInput | string
    workload?: IntFieldUpdateOperationsInput | number
    activityPeriod?: StringFieldUpdateOperationsInput | string
    placeOfCourse?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityUpdateManyMutationInput = {
    idStudent?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activityGroup?: StringFieldUpdateOperationsInput | string
    activityType?: StringFieldUpdateOperationsInput | string
    workload?: IntFieldUpdateOperationsInput | number
    activityPeriod?: StringFieldUpdateOperationsInput | string
    placeOfCourse?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
  }

  export type ActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    idStudent?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    activityGroup?: StringFieldUpdateOperationsInput | string
    activityType?: StringFieldUpdateOperationsInput | string
    workload?: IntFieldUpdateOperationsInput | number
    activityPeriod?: StringFieldUpdateOperationsInput | string
    placeOfCourse?: StringFieldUpdateOperationsInput | string
    certificate?: StringFieldUpdateOperationsInput | string
  }

  export type GroupOfActivityCreateInput = {
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityTypes?: typeOfActivityCreateNestedManyWithoutActivityGroupReferenceInput
  }

  export type GroupOfActivityUncheckedCreateInput = {
    id?: number
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityTypes?: typeOfActivityUncheckedCreateNestedManyWithoutActivityGroupReferenceInput
  }

  export type GroupOfActivityUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityTypes?: typeOfActivityUpdateManyWithoutActivityGroupReferenceNestedInput
  }

  export type GroupOfActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityTypes?: typeOfActivityUncheckedUpdateManyWithoutActivityGroupReferenceNestedInput
  }

  export type GroupOfActivityUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOfActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type typeOfActivityCreateInput = {
    description: string
    courseWorkload: number
    semesterWorkload: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    activityGroupReference: GroupOfActivityCreateNestedOneWithoutActivityTypesInput
  }

  export type typeOfActivityUncheckedCreateInput = {
    id?: number
    description: string
    activityGroup: string
    courseWorkload: number
    semesterWorkload: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type typeOfActivityUpdateInput = {
    description?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activityGroupReference?: GroupOfActivityUpdateOneRequiredWithoutActivityTypesNestedInput
  }

  export type typeOfActivityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    activityGroup?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type typeOfActivityUpdateManyMutationInput = {
    description?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type typeOfActivityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    activityGroup?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userType?: SortOrder
    status?: SortOrder
    matriculation?: SortOrder
    class?: SortOrder
    telephone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userType?: SortOrder
    status?: SortOrder
    matriculation?: SortOrder
    class?: SortOrder
    telephone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    userType?: SortOrder
    status?: SortOrder
    matriculation?: SortOrder
    class?: SortOrder
    telephone?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    passwordResetToken?: SortOrder
    passwordResetAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ActivityCountOrderByAggregateInput = {
    id?: SortOrder
    idStudent?: SortOrder
    name?: SortOrder
    activityGroup?: SortOrder
    activityType?: SortOrder
    workload?: SortOrder
    activityPeriod?: SortOrder
    placeOfCourse?: SortOrder
    certificate?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    id?: SortOrder
    idStudent?: SortOrder
    workload?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    idStudent?: SortOrder
    name?: SortOrder
    activityGroup?: SortOrder
    activityType?: SortOrder
    workload?: SortOrder
    activityPeriod?: SortOrder
    placeOfCourse?: SortOrder
    certificate?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    id?: SortOrder
    idStudent?: SortOrder
    name?: SortOrder
    activityGroup?: SortOrder
    activityType?: SortOrder
    workload?: SortOrder
    activityPeriod?: SortOrder
    placeOfCourse?: SortOrder
    certificate?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    id?: SortOrder
    idStudent?: SortOrder
    workload?: SortOrder
  }

  export type TypeOfActivityListRelationFilter = {
    every?: typeOfActivityWhereInput
    some?: typeOfActivityWhereInput
    none?: typeOfActivityWhereInput
  }

  export type typeOfActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GroupOfActivityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOfActivityAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupOfActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOfActivityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GroupOfActivitySumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GroupOfActivityRelationFilter = {
    is?: GroupOfActivityWhereInput
    isNot?: GroupOfActivityWhereInput
  }

  export type typeOfActivityCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    activityGroup?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type typeOfActivityAvgOrderByAggregateInput = {
    id?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
  }

  export type typeOfActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    activityGroup?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type typeOfActivityMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    activityGroup?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type typeOfActivitySumOrderByAggregateInput = {
    id?: SortOrder
    courseWorkload?: SortOrder
    semesterWorkload?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type typeOfActivityCreateNestedManyWithoutActivityGroupReferenceInput = {
    create?: XOR<typeOfActivityCreateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput> | typeOfActivityCreateWithoutActivityGroupReferenceInput[] | typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput[]
    connectOrCreate?: typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput | typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput[]
    connect?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
  }

  export type typeOfActivityUncheckedCreateNestedManyWithoutActivityGroupReferenceInput = {
    create?: XOR<typeOfActivityCreateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput> | typeOfActivityCreateWithoutActivityGroupReferenceInput[] | typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput[]
    connectOrCreate?: typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput | typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput[]
    connect?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
  }

  export type typeOfActivityUpdateManyWithoutActivityGroupReferenceNestedInput = {
    create?: XOR<typeOfActivityCreateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput> | typeOfActivityCreateWithoutActivityGroupReferenceInput[] | typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput[]
    connectOrCreate?: typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput | typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput[]
    upsert?: typeOfActivityUpsertWithWhereUniqueWithoutActivityGroupReferenceInput | typeOfActivityUpsertWithWhereUniqueWithoutActivityGroupReferenceInput[]
    set?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    disconnect?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    delete?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    connect?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    update?: typeOfActivityUpdateWithWhereUniqueWithoutActivityGroupReferenceInput | typeOfActivityUpdateWithWhereUniqueWithoutActivityGroupReferenceInput[]
    updateMany?: typeOfActivityUpdateManyWithWhereWithoutActivityGroupReferenceInput | typeOfActivityUpdateManyWithWhereWithoutActivityGroupReferenceInput[]
    deleteMany?: typeOfActivityScalarWhereInput | typeOfActivityScalarWhereInput[]
  }

  export type typeOfActivityUncheckedUpdateManyWithoutActivityGroupReferenceNestedInput = {
    create?: XOR<typeOfActivityCreateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput> | typeOfActivityCreateWithoutActivityGroupReferenceInput[] | typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput[]
    connectOrCreate?: typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput | typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput[]
    upsert?: typeOfActivityUpsertWithWhereUniqueWithoutActivityGroupReferenceInput | typeOfActivityUpsertWithWhereUniqueWithoutActivityGroupReferenceInput[]
    set?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    disconnect?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    delete?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    connect?: typeOfActivityWhereUniqueInput | typeOfActivityWhereUniqueInput[]
    update?: typeOfActivityUpdateWithWhereUniqueWithoutActivityGroupReferenceInput | typeOfActivityUpdateWithWhereUniqueWithoutActivityGroupReferenceInput[]
    updateMany?: typeOfActivityUpdateManyWithWhereWithoutActivityGroupReferenceInput | typeOfActivityUpdateManyWithWhereWithoutActivityGroupReferenceInput[]
    deleteMany?: typeOfActivityScalarWhereInput | typeOfActivityScalarWhereInput[]
  }

  export type GroupOfActivityCreateNestedOneWithoutActivityTypesInput = {
    create?: XOR<GroupOfActivityCreateWithoutActivityTypesInput, GroupOfActivityUncheckedCreateWithoutActivityTypesInput>
    connectOrCreate?: GroupOfActivityCreateOrConnectWithoutActivityTypesInput
    connect?: GroupOfActivityWhereUniqueInput
  }

  export type GroupOfActivityUpdateOneRequiredWithoutActivityTypesNestedInput = {
    create?: XOR<GroupOfActivityCreateWithoutActivityTypesInput, GroupOfActivityUncheckedCreateWithoutActivityTypesInput>
    connectOrCreate?: GroupOfActivityCreateOrConnectWithoutActivityTypesInput
    upsert?: GroupOfActivityUpsertWithoutActivityTypesInput
    connect?: GroupOfActivityWhereUniqueInput
    update?: XOR<XOR<GroupOfActivityUpdateToOneWithWhereWithoutActivityTypesInput, GroupOfActivityUpdateWithoutActivityTypesInput>, GroupOfActivityUncheckedUpdateWithoutActivityTypesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type typeOfActivityCreateWithoutActivityGroupReferenceInput = {
    description: string
    courseWorkload: number
    semesterWorkload: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput = {
    id?: number
    description: string
    courseWorkload: number
    semesterWorkload: number
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type typeOfActivityCreateOrConnectWithoutActivityGroupReferenceInput = {
    where: typeOfActivityWhereUniqueInput
    create: XOR<typeOfActivityCreateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput>
  }

  export type typeOfActivityUpsertWithWhereUniqueWithoutActivityGroupReferenceInput = {
    where: typeOfActivityWhereUniqueInput
    update: XOR<typeOfActivityUpdateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedUpdateWithoutActivityGroupReferenceInput>
    create: XOR<typeOfActivityCreateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedCreateWithoutActivityGroupReferenceInput>
  }

  export type typeOfActivityUpdateWithWhereUniqueWithoutActivityGroupReferenceInput = {
    where: typeOfActivityWhereUniqueInput
    data: XOR<typeOfActivityUpdateWithoutActivityGroupReferenceInput, typeOfActivityUncheckedUpdateWithoutActivityGroupReferenceInput>
  }

  export type typeOfActivityUpdateManyWithWhereWithoutActivityGroupReferenceInput = {
    where: typeOfActivityScalarWhereInput
    data: XOR<typeOfActivityUpdateManyMutationInput, typeOfActivityUncheckedUpdateManyWithoutActivityGroupReferenceInput>
  }

  export type typeOfActivityScalarWhereInput = {
    AND?: typeOfActivityScalarWhereInput | typeOfActivityScalarWhereInput[]
    OR?: typeOfActivityScalarWhereInput[]
    NOT?: typeOfActivityScalarWhereInput | typeOfActivityScalarWhereInput[]
    id?: IntFilter<"typeOfActivity"> | number
    description?: StringFilter<"typeOfActivity"> | string
    activityGroup?: StringFilter<"typeOfActivity"> | string
    courseWorkload?: IntFilter<"typeOfActivity"> | number
    semesterWorkload?: IntFilter<"typeOfActivity"> | number
    status?: StringFilter<"typeOfActivity"> | string
    createdAt?: DateTimeFilter<"typeOfActivity"> | Date | string
    updatedAt?: DateTimeFilter<"typeOfActivity"> | Date | string
  }

  export type GroupOfActivityCreateWithoutActivityTypesInput = {
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOfActivityUncheckedCreateWithoutActivityTypesInput = {
    id?: number
    name: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GroupOfActivityCreateOrConnectWithoutActivityTypesInput = {
    where: GroupOfActivityWhereUniqueInput
    create: XOR<GroupOfActivityCreateWithoutActivityTypesInput, GroupOfActivityUncheckedCreateWithoutActivityTypesInput>
  }

  export type GroupOfActivityUpsertWithoutActivityTypesInput = {
    update: XOR<GroupOfActivityUpdateWithoutActivityTypesInput, GroupOfActivityUncheckedUpdateWithoutActivityTypesInput>
    create: XOR<GroupOfActivityCreateWithoutActivityTypesInput, GroupOfActivityUncheckedCreateWithoutActivityTypesInput>
    where?: GroupOfActivityWhereInput
  }

  export type GroupOfActivityUpdateToOneWithWhereWithoutActivityTypesInput = {
    where?: GroupOfActivityWhereInput
    data: XOR<GroupOfActivityUpdateWithoutActivityTypesInput, GroupOfActivityUncheckedUpdateWithoutActivityTypesInput>
  }

  export type GroupOfActivityUpdateWithoutActivityTypesInput = {
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupOfActivityUncheckedUpdateWithoutActivityTypesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type typeOfActivityUpdateWithoutActivityGroupReferenceInput = {
    description?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type typeOfActivityUncheckedUpdateWithoutActivityGroupReferenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type typeOfActivityUncheckedUpdateManyWithoutActivityGroupReferenceInput = {
    id?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    courseWorkload?: IntFieldUpdateOperationsInput | number
    semesterWorkload?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use GroupOfActivityCountOutputTypeDefaultArgs instead
     */
    export type GroupOfActivityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupOfActivityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityDefaultArgs instead
     */
    export type ActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupOfActivityDefaultArgs instead
     */
    export type GroupOfActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupOfActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use typeOfActivityDefaultArgs instead
     */
    export type typeOfActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = typeOfActivityDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}